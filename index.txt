.Ruby

-Creado por Yukihiro Matsumoto
-Creado en 1995 / Explota en 2005 por Ruby on Rails
-Inspirado en lenguajes como Python y Perl
-Interpretado y orientado a objetos / Todo es un objeto o casi todo

Ventajas

-Todo es un objeto, no debemos tipar el tipo de variable / num = 5 ruby entiende que 5 es un objeto numeric
-Modificable al gusto
-Productividad y diversión del desarrollador
-Lenguaje antiguo y maduro

Desventajas

-Lento?
-Decrecimiento en popularidad
-No tiene una gran compañia detras
-Alto uso de memoria?

.Ruby3

-Performance
-Concurrency
-Static analysis
-Transition issues

Performance

-Velocidad
-Garbage Compactor / Object separator / Mark and swip
-Nuevo Ruby JIT / Compilacion just in time

Concurrency

Habilidad que tiene un lenguaje para ejecutar procesos simultaneos
-Falcon Rack webserver y Async
-Computación paralela

Static analysis

Se repite codigo en las pruebas
-Steep
-Sorbet

Transition issues

-Transmission parameters
-Compatibilidad con versiones anteriores

.Numeric / Integer

Binario a entero
0b"binario" = entero
0b1011011 = 91

Base octal a entero
0"base_octal" = entero
01475 = 829

Base exadecimal a entero
0x"exadecimal" = entero
0xCE45 = 52805

Math::PI = 3.14159...
pi = Math::PI
pi.round = 3
pi.round(5) = 3.14159

def commas x
  str = x.to_s.reverse
  str.gsub!(/([0-9]{3})/,"\\1,")
  str.gsub(/,$/,"").reverse
end

commas 1456789 = "1,456,789"

Bases partiendo de entero
237.to_s = "237" - string
237.to_s(2) = "11101101" - binario
237.to_s(8) = "355" - base 8
237.to_s(16) = "ed" - base 16

Math.sqrt(25) = 5.0 - Funcion para sacar la raiz cuadrada

Raices: cubicas, cuartas, etc . . .

x = 531441
raiz_cubica = Math.exp(Math.log(x)/3.0) = 81.0000000003
raiz_cuarta = Math.exp(Math.log(x)/4.0) = 27.0
raiz_quinta = Math.exp(Math.log(x)/5.0) = 

a = rand = 0.29234823892
a = rand * 100 = 43.32454436543
a.round = 43
a = rand(25) = numeros random entre 0 y 25

numero = 5
numero.methods = [lista de metodos para el objeto 5]
numero.even? = false - par
!numero.even? = true - par negado
numero.odd? = true - impar

.String y Symbols

tipos de variables

variable_local = 1
CONSTANTES = 2
@instancia = 3
@@de_clase = 4
$globales = 5

Las variables locales solo viven dentro de su scope
Las variables de instancia cada objeto tendra su valor propio
Las variables de clase, todos los objetos de esa clase compartiran ese valor
Las variables globales pueden ser accedidas desde cualquier punto de mi programa

nombre = "Sergio"
puts "hola #{nombre}" = hola Sergio
cadena = "soy un muñeco de nieve \u2603"
puts %q[ella dijo: "buenos dias"] = ella dijo: "buenos dias"

Funcion recursiva
Un factorial es multiplicar un numero por todos sus numeros anteriores: 
5 x 4
r x 3
r x 2
r x 1
= 120

string = "la respuestsa es: #{def factorial(n)
  n == 0 ? 1 : n * factorial(n-1)
end
answer = factorial(5)},
claro que si"
= "la respuestsa es: 120,\nclaro que si"

nombre = "Sergio"
nombre.class = String
nombre.methods = [Lista de metodos de la clase del objeto nombre]
nombre.include? "S" = true
nombre.include? "Z" = false
nombre.include? "s" = false
nombre.eql? "Sergio" = true
nombre.eql? "sergio" = false
nombre.length = 6
nombre.size = 6
s1 = "Era un dia muy oscuro"
palabras = s1.split = ["Era, "un", "dia", "muy", "oscuro"]

nombre = "Hector"
nombre2 = "Hector"
nombre.object.id = 280
nombre2.object.id = 300

:rojo # :rojo
color1 = :rojo # :rojo
color2 = :rojo # :rojo
color1.object.id # 2210588
color2.object.id # 2210588

Los simbolos son una etiqueta, son diferentes a los strings.

.Hashes y arrays

arrays, vectores
languages = [
  "Ruby",
  "Python",
  "C++
]

hashes, diccionarios, maps
dictionary = {
  "uno": "one",
  "dos": "two",
  "tres": "three"
}

vector = Array.new # []
vector.class # Array - dinamicos
vector = [1, 2, 3, 4, 5] # [1, 2, 3, 4, 5]
vector = Array.new 3 # [nil, nil, nil]
vector = Array,new 3,"hola" # ["hola", "hola", "hola"]
vector = [1, 63, 23, 612, [2, 3], 2.5, "hola"] # [1, 63, 23, 612, [2, 3], 2.5, "hola"]
vector.methods # metodos de la clase Array del objeto vector
array = [1, 23, 321, 2]
array.include? 5 # false
array,include? 23 # true
array[0] # 1
array.at 0 # 1
array.slice 0 # 1
array = [1, 62, 32, 60, 13, 2 ,15]
array.sort # [1, 2, 13, 15, 32, 60, 62]
array # [1, 62, 32, 60, 13, 2 ,15]
array.sort!
array # [1, 2, 13, 15, 32, 60, 62]
array.last # 62
x = [5, 8, 12, 9, 4, 30]
x.detect { |e| e % 6 == 0 } # 12
x.find { |e| e % 6 == 0 } # 12
x.find_all { |e| e % 2 == 0 } # [8, 12, 4, 30]
array = ["hola", "adios", "hola", "adios"]
array = %w(hola adios hola adios) # ["hola", "adios", "hola", "adios"]
a = %w(January February March Abril) # ["January", "February", "March", "Abril"]
a.grep(/ary/) # ["January", "February"]

h1 = {"one" => "uno", "two" => "dos"} # {"one" => "uno", "two" => "dos"}
h1.class # Hash
h1.store("three", "tres") # "tres"
h1 # {"one" => "uno", "two" => "dos", "three" => "tres}
h1.methods # [metodos de la clase Hash del objeto h1]
h1.empty? # false
h1.length # 3
h1.size # 3
h1.clear # {}
h1.empty? # true
h1 = {1 => 1, 2 => 4, 3 => 9, 4 => 16}
h1.delete(3) # 9

h1 # { 1 => 1, 2 => 4, 4 => 16}
h1.each do |key, val|
  print val, " ", key, "; "
end
# 1 1; 4 2; 16 4; => {1=>1, 2=>4, 4=>16}

h1.invert # {1=>1, 4=>2, 16=>4}
a = {"a" => 1, "b" => 2 }
a.has_key? "c" # false
a.include? "a" # true
a.include? 1 # false - solo verifica las llaves
a.has_value? 1 # true - solo verifica en los valores
a.to_a # [["a",1],["b",2]]
a.values # [1,2]
a.keys # ["a","b"]
names = { "fredy" => "jones", "jane" => "tucket", "joe" => "tucker", "mary" => "SMITH" }
names.select { | key, value| value == "tucket" } # {"jane"=>"tucket"}

dict = { "base" => "foundation", "pedestal" => "base" }
added = {"base" => "non-acid", "salt" => "NaCl" }
new_dict = dict.merge(added) # {"base"=>"non-acid", "pedestal"=>"base", "salt"=>"NaCl"} - sobre escribe la ultima llave a las primeras llaves

.Ranges

(10..20).step(2).to_a # [10, 12, 14, 16, 18, 20]
digits = 0..9 # 0..9
digits # 0..9
digits.class # Range
digits.is_a? Range # true
digits.is_a? String # false
digits.to_a # [0, 1, 2, 3, 4, 5, ,6 ,7 ,8 ,9]
0..9 - inclusivo porque incluye ambos numeros
0...9 - exclusivo, solo incluye del primer numero a 1 numero antes del ultimo
# [0, 1, 2, 3, 4, 5, 6, 7, 8]
digits.exclude_end? # false
digits2 = 0...9 # 0...9
digits2.exclude_end? # true
digits1.max # 9
digits1.min # 0

letters = "a".."z" # "a".."z"
letters.to_a # ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]

letters.each { |x| puts x } # 
r1 = 23456..34567 # 23456..34567
r1.include? 30000 # true
r1.include? 50000 # false
r1.methods # [metodos de la clase Range del objeto r1]
rango = (1..30).step(2) # - porque quiero agregarle el metodo step a todo el rango
rango.to_a # [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]

.Condiciones

nombre = gets # Toma de valor absolutamente todo, la cadena y el enter
Sergio
=> "Sergio\n"
nombre2 = gets.chomp # No captura el enter, solo el valor de la cadena
Sergio
=> "Sergio"

if nombre == nombre2
  puts "iguales"
else
 puts "diferentes"
end

.Regex
.Bloques
.Ciclos
.Procs y lambdas
.Manejo de excepciones

.POO / Programación orientada a objetos

  BasicObject
    Object
String Range Numeric Array Hash Module

      Numeric
Integer Float Complex

  Module
Class

BasicObject es una clase vacía y sirve para que todas las clases hereden de esta

Module es un conjunto de metodos y constantes y la clase Class es hija de la clase Module

class Person
end

Person.class # Class - cualquier clase nueva heredara de la clase Class

Podemos preguntar su antecesor o superclase

Class.superclass # Module
Person.superclass # Object
Module.class # Class

Entramos en un tipo de paradoja al ver las respuestas con como estan ordenadas arriba

Person.class va a ser Class ya que Person es una clase
Pero Person.superclass es Object porque Person termina siendo un objeto

La clase class es una instancia de la clase class
Un module es un conjunto de metodo y constantes agrupadas dentro de untodo
por lo que es lo mismo que una clase, pero la diferencia principal es que una clase puede
ser instanciada pero un module no.

Module es una superclase de Class pero tambien una instancia de Class asi tambien las demas clases
son una instancia de Class, todos heredan de la clase Class pero la clase principal es la clase
BasicObject

.Metodos accesores
.Modificadores de acceso
.Herencia
.Módulos y mixins

.Extras

-bundler y las ruby gems

Son ciertas librerias o paquetes que ya alguien realizo y que ya tienen una funcionabilidad en especifico
y podemos incluir esas gemas en nuestros proyectos y asi ahorrarnos codigo y tiempo
No se trata de reinventar la rueda si podemos utilizar las herramientas que alguien mas ya hizo solamente
hay que aprender a usar las gemas.

Un bundler si venimos de javascript o de node puede ser como un npm, osea es un manejador de paquetes pero
en este caso de gemas(librerias), bundler es el encargado de ir a la base de datos del npm un paquete en
especifico y traerlo e incluirlo dentro de nuestro proyecto. Bundler es el npm y los paquetes son las gems.

Todas estas gemas estan alocadas en la pagina: rubygems.org

Normalmente bundler ya viene instalado cuando instalamos Ruby pero si no, podemos instalarlo asi: gem install bundler
Hay que instalarlo dentro de la carpeta del proyecto

Recordar que ruby ya viene instalado en muchos sistemas operativos, pero si no podemos instalarlo desde su  pagina o con rvm

.Declarar un proyecto nuevo en ruby!

mkdir nombre_del_proyecto
bundle init

Esto va a crear un archivo Gemfile dentro de mi carpeta donde haya ejecutado el bundle init (inicializando el proyecto)
Con el sig contenido:

# frozen_string_literal: true

source "https://rubygems.org"

# gem "rails"

.Que es el Gemfile

Asi como los archivos o los proyectos que incluyen npm nos crean un package.json, el Gemfile sería su similar,
aqui es donde podremos ver y agregar todas las gemas que queramos en nuestro proyecto, las gemas que esten declaradas ahi
despues podemos correr bundle install y bundle ira al sitio rubygems y descargara el contenido de esas gemas para poder ser
utilizadas en nuestro proyecto.

Agregaremos en el Gemfile: gem 'bcrypt', '~> 3.1', '>= 3.1.20'
Y despues en la terminal ejecutaremos: bundle install o bundle i

Una vez que se descarguen las librerias, aparecera un archivo llamado Gemfile.lock, pero este archivo es solamente para
Ruby, este archivo no lo modificaremos para nada.

.Pruebas / Tests

Gemas: RSpec y Minitest

RSpec es un DSL o lenguaje de dominio especifico, osea que solo sera util en un fin en especifico y este es realizar pruebas.

Minitest es el mismo codigo Ruby que hara pruebas al codigo Ruby a traves de palabras de "comandos" / reservadas eso quiere
decir que sirve para hacer pruebas y para codear y RSpec solo para pruebas.

Agregamos al Gemfile:

gem 'rspec', '~> 3.12'
gem 'minitest', '~> 5.20'

bundle i

Realizaremos pruebas con RSpec, para ello hay que inicializar RSpec: rspec --init

Esto nos va a crear un archivo .rspec y una carpeta spec con un archivo dentro llamado spec_helper.rb

Este spec_helper.rb es donde estara toda la configuración que se utilizaran en nuestras pruebas

Crearemos una carpeta src y aqui guardaremos todas las clases que usaremos y dentro de la carpeta spec los archivos de pruebas.

En la carpeta src crearemos el archivo factorial.rb
En la carpeta spec crearemos el archivo de prueba factorial_spec.rb

Por convencion se pone el mismo nombre del archivo a probar pero lo que si debe ir es el _spec.rb
En la parte de arriba debo decirle al archivo de prueba que archivo es el que vamos a probar, para esto le damos la direccion
del archivo a probar, poniendolo en la parte de arriba.

RSpec

require './src/factorial.rb' # requerimos el archivo al cual le haremos las pruebas

RSpec.describe Factorial do # coloco la clase a la cual le hare la prueba y abro un bloque
  describe "#factorial_of" do # coloco al metodo al cual yo quiero hacerle la prueba
    it "devolver un 120" do # coloco lo que yo espero recibir al probar el metodo
      expect(Factorial.new.factorial_of(5)).to eq(120) # espero que al inicializar el factorial y ejecutar ese metodo con el argumento 5, el resultado sea igual a 120
    end
  end
end

Y para correr las pruebas, estando fuera de la carpeta spec:
bundle exec rspec o rspec - se ejecutaran todas las pruebas
rspec ruta_del_archivo - se ejecuta solo ese archivo

rspec ./spec/test_saludo.rb

Y en este caso la prueba paso correctamente

Minitest

En MiniTest las pruebas de corren de forma aleatoria por lo que no podemos depender de una prueba anterior o siguiente ya que es posible que falle
Si tenemos 3 pruebas puede que se ejecuten en orden, 1-2-3 despues 2-1-3 y asi aleatoriamente 

Asi que si ocupamos una variable constante debemos declararlas en un metodo anterior y de ahi poder utilizar esas variables de instancia

Codigo ruby que se ejcutara dentro del codigo ruby, por lo que no ocupamos una carpeta especial para las pruebas.
Crearemos un archivo dentro de la carpeta src llamado saludo.rb
Y dentro de la carpeta src crearemos test_saludo.rb a diferencia de rspec que era dentro de la carpeta spec (pero por orden si lo llevamos a otra carpeta de pruebas en un futuro)

Para ejecutar la prueba con Minitest se hace de la siguiente manera: bundle exec ruby ruta_del_archivo_a_probar

bundle exec ruby ./src/test_saludo.rb

Se creo un archivo en la otra carpeta para probar que no importa donde este, correra bien: bundle exec ruby ./spec/test_saludo.rb

.byebug

debuggear es un termino muy utilizado en los lenguajes de programacion y es la funcionabilidad de poder saber exactamente en que linea de codigo esta fallando nuestro programa
y eso haga que se cierre y nosotros debemos buscar/investigar y saber encontrar ese error y solucionarlo.

Buscaremos la gema byebug en nuestra pagina rubygems.org y la colocaremos en el Gemfile: gem 'byebug', '~> 11.1', '>= 11.1.3' para correr bundle i y ya tenerla en el proyecto

En el archivo que queramos utilizar esta gema, siempre hay que requerirlo al igual que las demas gemas en otros archivos: require 'byebug' en este caso lo colocamos dentro de animal.rb

Ruby retorna la ultima linea de codigo dentro de un bloque

Cuando el programa encuentre un byebug dentro de su ejecucion se detendra y ahi podremos revisar el codigo

.Manejo de archivos

File.open("archivo.txt", "r") do |f|
  while line = f.gets
    puts line.upcase
    puts line.downcase
  end
end

En ruby asi como en muchos lenguajes, podemos leer archivos y escribirlos
Los archivos se controlan linea por linea, ya sea de arriba a abajo de abajo hacia abajo

Vamos a crear un archivo file.txt dentro de mi carpeta src

.Proyecto final

clases
objetos
archivos
gemas
etc...

Primero debemos diagramacion nuestro proyecto a traves de sus casos de uso.
Quien interactuara con nuestro sistema y que acciones tendra ese actor sobre nuestro sistema.

Nuestro actor va a ser: 
-usuario

El usuario que acciones podra hacer en nuestro sistema?
-login
-crear una tarea
-editar tarea
-cambiar estado de tarea


Estas notas solo son guia de cuando se este haciendo alguna accion:

login: usuario - contraseña # Para el login el actor debe mandar su usuario y su contraseña

crear_tarea: tarea {"name": "string", "state": int} # Para crear una tarea el usuario debe mandar un hash con las llaves, nombre y state y sus valores

editar_tarea: name: "string" # Para editar una tarea el usuario debe mandar como parametro el nombre de la tarea

cambiar_estado: name: "string" # Para cambiar el estado de una tarea el usuario debe mandar como parametro el nombre de la tarea

.proyecto

En el proyecto una vez que ya lo inicialice con bundle init, ahi creare una carpeta src y otra llamda dist

src sera para guardar todos los archivos en si de ruby
dist sera para guardar todos los archivos que utilizaremos en el proyecto

.Time


La clase Time en Ruby es parte del núcleo del lenguaje Ruby y no está específicamente asociada a
Ruby on Rails. Time se utiliza para representar fechas y horas en Ruby y ofrece diversas
funcionalidades para trabajar con ellas. Aquí hay un resumen de la clase Time:

Puedes crear un objeto Time de varias maneras:

# Obtener la hora actual
current_time = Time.now

# Crear un objeto Time con una fecha y hora específicas
specific_time = Time.new(2023, 11, 16, 12, 30, 0)

Algunos de los métodos más comunes de la clase Time incluyen:

future_time = current_time + 60  # Sumar 60 segundos
past_time = current_time - 3600  # Restar 1 hora (3600 segundos)

formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")

Puedes especificar el formato utilizando directivas como %Y para el año, %m para el mes, %d
para el día, %H para la hora, %M para los minutos, %S para los segundos, entre otros.

year = current_time.year
month = current_time.month
day = current_time.day
hour = current_time.hour
minute = current_time.min
second = current_time.sec

future_time > current_time  # Compara si `future_time` es después de `current_time`

cuando trabajas con la clase Time y deseas sumar tiempo, generalmente lo haces sumando segundos al
objeto Time. Esto se debe a que internamente, el tiempo se maneja en segundos.

Por ejemplo, para sumar 5 minutos a un objeto Time, puedes hacerlo así:

current_time = Time.now
future_time = current_time + 5 * 60  # Sumar 5 minutos (5 * 60 segundos)

Puedes trabajar con zonas horarias utilizando Time y DateTime. Ten en cuenta que el manejo de
zonas horarias puede ser complejo y es recomendable usar bibliotecas especializadas como TZInfo o
ActiveSupport::TimeZone (en el caso de Rails) para manejar zonas horarias de manera más robusta.

La clase Time es más adecuada para representar un punto específico en el tiempo, con precisión
hasta los segundos, pero no es tan flexible para trabajar con fechas específicas y manipulación
de meses y años.

La clase DateTime proporciona mayor flexibilidad para trabajar con fechas y horas, incluida la
capacidad de sumar y restar meses directamente, pero puede tener una precisión ligeramente menor
que Time en términos de manejo de segundos.

.[ [ [] ] ]
[[][][],
 [][][],
 [][][]]


En Ruby, existe una clase llamada Matrix que se encuentra en la biblioteca estándar.
Esta clase proporciona funcionalidades para trabajar con matrices (arreglos bidimensionales) de
manera más conveniente. Puedes realizar operaciones matriciales, como sumar matrices, multiplicar
matrices, calcular determinantes, invertir matrices, entre otras.

require 'matrix'

# Crear matrices
matrix_a = Matrix[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
matrix_b = Matrix[[9, 8, 7], [6, 5, 4], [3, 2, 1]]

# Sumar matrices
result_matrix = matrix_a + matrix_b

# Multiplicar matrices
result_matrix = matrix_a * matrix_b

# Mostrar el resultado
puts result_matrix

En resumen, un arreglo puede tener una o más dimensiones, y cuando tiene dos dimensiones, puede
considerarse una matriz. Sin embargo, el término "matriz" se utiliza a menudo para referirse
específicamente a arreglos bidimensionales, y la clase Matrix en Ruby ofrece funcionalidades
adicionales específicamente diseñadas para trabajar con matrices.